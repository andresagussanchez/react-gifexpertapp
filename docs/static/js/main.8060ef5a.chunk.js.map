{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAoB9C,OACI,sBAAMC,SAbW,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAQjB,SACI,uBACIO,KAAM,OACNC,MAAST,EACTU,SArBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCNdG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAWH,GAD/C,+DAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCAXO,EAAc,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEjC,OACI,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,WCHGO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAb,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAwBxC,OAjBAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GACHC,YAAW,WAEPJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAGd,UAIZ,CAAEpB,IAEEqB,EDtB2BM,CAAc3B,GAAnCa,EAFwB,EAE7BN,KAAca,EAFe,EAEfA,QAEtB,OACI,qCACI,mCAAMpB,EAAN,OAEEoB,GAAW,2CAEb,qBAAKJ,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAACC,GAAD,OACR,cAAC,EAAD,eAESA,GADEA,EAAIC,aEd1BiB,EAAe,WAAO,IAAD,EAEM1C,mBAAS,CAAC,cAFhB,mBAEvB2C,EAFuB,KAEX5C,EAFW,KAS9B,OACI,qCACA,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAIA,6BAEQ4C,EAAWpB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEAA,SAAWA,GADLA,Y,MCjB1B8B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.8060ef5a.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ( {setCategories} ) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if ( inputValue.trim().length > 2) {\n           setCategories( cats => [inputValue, ...cats ] ); \n           setInputValue('');\n        }\n\n        \n\n    }\n\n    return (\n        <form onSubmit= {handleSubmit} >\n            <input\n                type= 'text'\n                value= { inputValue }\n                onChange= { handleInputChange }\n            />\n        </form>\n    )\n}\n\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","\n\n    export const getGifs = async(category) => {\n        const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=Fsg0bbRhruT61Uq89MbF8Sct09o3nvcm`;\n        const resp = await fetch( url )\n        const { data } = await resp.json();\n\n        const gifs = data.map( img => {\n           return {\n                id: img.id,\n                title: img.title,\n                url: img.images?.downsized_medium.url\n            } \n        })\n\n        return gifs;\n\n    }","import React from 'react'\n\nexport const GifGridItem = ({ title, url}) => {\n\n    return (\n        <div className=\"card animate__animated animate__bounce\" >\n          <img src={ url } alt={ title } />\n          <p> { title } </p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ( {category} ) => {\n\n    const { data:images , loading } = useFetchGifs( category );\n\n    return (\n        <>\n            <h3> {category} </h3>\n\n            { loading && <p>Loading...</p>}\n\n            <div className=\"card-grid\">\n                {   \n                    images.map( (img) => (\n                        <GifGridItem \n                            key= { img.id }\n                            { ...img } />\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGifs = ( category ) => {\n    \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n\n        getGifs( category )\n            .then( imgs => {\n                setTimeout(() => {\n                   \n                    setState({\n                        data: imgs,\n                        loading: false\n                    });\n                     \n                }, 2000)\n                \n            })\n\n    }, [ category ] )\n\n    return state; // { data: [], loading: true }\n\n\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid'\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['One Punch'])\n\n    // const handleAdd = () => {\n    //     setCategories( cats => [...cats, 'Pokem√≥n'] );\n    // }\n\n\n    return (\n        <>\n        <h2>GifExpertApp</h2>\n        <AddCategory setCategories={ setCategories }  />\n        <hr/>\n\n        \n\n        <ol>\n            {\n                categories.map( category => ( \n                    <GifGrid \n                    key= {category}\n                    category= {category} />\n                ))\n            }\n        </ol>\n            \n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\n\nimport './index.css';\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  \n  document.getElementById('root')\n);\n"],"sourceRoot":""}